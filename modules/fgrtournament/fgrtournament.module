<?php

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */
function fgrtournament_help($path, $arg) {
  switch ($path) {
    case "admin/help#fgrtournament":
      return '' . t("Displays tournament bracket") . '';
      break;
  }
}

/**
 * Implements hook_node_info().
 */
function fgrtournament_node_info() {
  $items = array(
      'fgrtournament' => array(
          'name' => t('FGR tournament bracket'),
          'base' => 'node_content',
          'description' => t('Displays tournament bracket.'),
          'help' => 'Displays tournament bracket.',
      ),
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function fgrtournament_node_view($node, $view_mode, $langcode)
{
    switch ($node->type) {
        case 'fgrtournament':
            $js_options = array(
                'weight' => 1
            );
            module_load_include('inc', 'fgrtournament', 'fgrtournament.api');
            drupal_add_css(drupal_get_path('module', 'fgrtournament') . '/css/jquery-ui.min.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
            drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/lib/jquery-2.2.4.min.js', $js_options);
            if(isset($_GET['tournament_id'])) {
                $js_options = array(
                    'weight' => 1000
                );
                drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/lib/jquery-ui.min.js', $js_options);
                drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/lib/sorttable.js', $js_options);
                drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/lib/sly.js', $js_options);
                drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/lib/jquery.paging.js', $js_options);
                drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/fgrtournament.js', $js_options);
                $tournament_id = $_GET['tournament_id'];
                $tournament_type = 'info';
                if(isset($_GET['type'])) {
                    $tournament_type = $_GET['type'];
                }
                $team_node_id = get_fgrteam_node_id();
                $game_node_id = get_fgrgame_node_id();
                $tournament_metadata = get_tournament_metadata($tournament_id);
                switch ($tournament_type) {
                    case 'games':
                        fill_games_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id);
                    break;
                    case 'info':
                        fill_tournament_info_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id);
                }
            } else {
                $js_options = array(
                    'weight' => 1000
                );
                drupal_add_css(drupal_get_path('module', 'fgrtournament') . '/css/bootstrap.min.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
                drupal_add_css(drupal_get_path('module', 'fgrtournament') . '/css/bootstrap-treeview.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
                drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/lib/bootstrap-treeview.js', $js_options);
                $result = get_last_tournaments();
                $node->content['fgrtournament_list'] = array(
                    "#markup" => theme('fgrtournament_list', array('fgrtournaments' => $result, 'node' => $node))
                );
            }
            break;
    }
}

/**
 * Implements hook_theme();
*/
function fgrtournament_theme() {
    return array(
        'fgrtournament_list' => array(
            'variables' => array('fgrtournaments' => NULL, 'node' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-list',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_info' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-info',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_playoff' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-playoff',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_chessmates' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-chessmates',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_table_stat' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-table-stat',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games_current' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL, 'filter_params' => NULL),
            'template' => 'templates/fgrtournament-games-current',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games_ended' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL, 'filter_params' => NULL),
            'template' => 'templates/fgrtournament-games-ended',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games_planned' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL, 'filter_params' => NULL),
            'template' => 'templates/fgrtournament-games-planned',
            'file' => 'fgrtournament.pages.inc',
        )
    );
}

/**
 * Implements hook_admin().
 */
function fgrtournament_admin() {
    $form = array();
    $form['fgrtournament_system_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Statistic system url'),
        '#default_value' => variable_get('fgrtournament_system_url', 'http://fgr.ntrlab.ru:81/api'),
        '#description' => t("Statistic system url to get fgr tournament data."),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function fgrtournament_menu() {
    $items = array();
    $items['admin/config/fgrtournament'] = array(
        'title' => 'FGR Tournament module settings',
        'description' => 'FGR Tournament module settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fgrtournament_admin'),
        'access arguments' => array('administer fgrtournament settings'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 * @param $node
 * @param $tournament_id
 * @param $tournament_metadata
 * @param $team_node_id
 * @param $game_node_id
 * @throws Exception
 */
function fill_games_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id)
{
    $games_type = 'result';
    if (isset($_GET['game_type'])) {
        $games_type = $_GET['game_type'];
    }
    $menu_markup = get_menu_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id);
    $filter_params = get_filter_params();
    switch ($games_type) {
        case 'result':
            $tournament_games = get_tournament_games_by_id($tournament_id, $games_type, $filter_params);
            $tournament_games['AllCount'] = get_games_count($tournament_id, $games_type, $filter_params);
            $tournament_games['TournamentMetaData'] = $tournament_metadata;
            $node->content['fgrtournament_games_ended'] = array(
                "#markup" => $menu_markup . theme('fgrtournament_games_ended', array('tournament_data' => $tournament_games,
                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'filter_params' => $filter_params))
            );
            break;
        case 'scheduled':
            $tournament_games = get_tournament_games_by_id($tournament_id, $games_type, $filter_params);
            $tournament_games['AllCount'] = get_games_count($tournament_id, $games_type, $filter_params);
            $tournament_games['TournamentMetaData'] = $tournament_metadata;
            $node->content['fgrtournament_games_ended'] = array(
                "#markup" => $menu_markup . theme('fgrtournament_games_ended', array('tournament_data' => $tournament_games,
                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'filter_params' => $filter_params))
            );
            break;
        case 'online':
            $tournament_games = get_tournament_games_by_id($tournament_id, $games_type, $filter_params);
            $tournament_games['AllCount'] = get_games_count($tournament_id, $games_type, $filter_params);
            $tournament_games['TournamentMetaData'] = $tournament_metadata;
            $node->content['fgrtournament_games_ended'] = array(
                "#markup" => $menu_markup . theme('fgrtournament_games_ended', array('tournament_data' => $tournament_games,
                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'filter_params' => $filter_params))
            );
            break;
    }
}

/**
 * @param $node
 * @param $tournament_id
 * @param $tournament_metadata
 * @param $team_node_id
 * @param $game_node_id
 * @return string
 * @throws Exception
 */
function get_menu_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id)
{
    $tournament_info = array();
    $tournament_info['TournamentMetaData'] = $tournament_metadata;
    $tournament_info['LastGames'] = get_last_tournament_games($tournament_id);
    $tournament_info['GameNodeId'] = $game_node_id['nid'];
    $tournament_info['TeamNodeId'] = $team_node_id['nid'];
    $menu_markup = theme('fgrtournament_info', array('tournament_data' => $tournament_info,
        'node' => $node));
    return $menu_markup;
}

function get_filter_params()
{
    return $filter_params = array(
        'team_id' => (isset($_GET['team_id'])) ? $_GET['team_id'] : null,
        'start_date' => (isset($_GET['start_date'])) ? $_GET['start_date'] : null,
        'end_date' => (isset($_GET['end_date'])) ? $_GET['end_date'] : null,
        'top' => (isset($_GET['top'])) ? $_GET['top'] : 20,
        'skip' => (isset($_GET['skip'])) ? $_GET['skip'] : 0
    );
}

/**
 * @param $node
 * @param $tournament_id
 * @param $tournament_metadata
 * @param $team_node_id
 * @param $game_node_id
 * @throws Exception
 */
function fill_tournament_info_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id)
{
    $menu_markup = get_menu_markup($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id);
    $content_markup = get_markup_for_tournament($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id);
    $node->content['fgrtournament_games_planned'] = array(
        "#markup" => $menu_markup . $content_markup
    );
}

/**
 * @param $node
 * @param $tournament_id
 * @param $tournament_metadata
 * @param $team_node_id
 * @param $game_node_id
 * @return string
 */
function get_markup_for_tournament($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id) {
    $markup = '';
    if(is_league_type($tournament_metadata['TournamentTypeId'])) {
        $childs = get_tournament_childs($tournament_id);
        $playoff_markup = '';
        foreach($childs as $child) {
            $child_metadata = get_tournament_metadata($child['CompId']);
            if(is_playoff_type($child['CompTypeId'])) {
                $playoff_markup .= get_markup_tournament_with_games($node, $child['CompId'], $child_metadata, $team_node_id, $game_node_id);
            } else {
                $markup .= get_markup_tournament_with_games($node, $child['CompId'], $child_metadata, $team_node_id, $game_node_id);
            }
        }
        $markup = $playoff_markup . $markup;
    } else {
        $markup .= get_markup_tournament_with_games($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id);
    }
    return $markup;
}

/**
 * @param $node
 * @param $tournament_id
 * @param $tournament_metadata
 * @param $team_node_id
 * @param $game_node_id
 * @return string
 * @throws Exception
 */
function get_markup_tournament_with_games($node, $tournament_id, $tournament_metadata, $team_node_id, $game_node_id) {
    $markup = '';
    $comp_views = get_views_for_comp_type($tournament_metadata['TournamentTypeId']);
    if($comp_views != null) {
        foreach($comp_views as $key => $view) {
            switch($view) {
                case 'chessmates':
                    // Team positions markup
                    $tournament_data = get_tournament_team_stats_by_id($tournament_id);
                    $tournament_data['TournamentMetaData'] = $tournament_metadata;
                    $markup .= theme('fgrtournament_table_stat', array('tournament_data' => $tournament_data, 'node' => $node, 'team_node_id' => $team_node_id['nid']));
                    // Chessmates table markup
                    $tournament_data = get_tournament_by_id_chess_mates($tournament_id);
                    $tournament_data['TournamentMetaData'] = $tournament_metadata;
                    $markup .= theme('fgrtournament_chessmates', array('tournament_data' => $tournament_data, 'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid']));
                    break;
                case 'playoff':
                    $tournament_data = get_playoff_pairs($tournament_id);
                    $markup .= theme('fgrtournament_playoff', array('tournament_data' => $tournament_data, 'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid']));
                    break;
                case 'group':
                    $childs = get_tournament_childs($tournament_id);
                    foreach($childs as $round_robin) {
                        $round_robin_metadata = get_tournament_metadata($round_robin['CompId']);
                        $markup .= get_markup_tournament_with_games($node, $round_robin['CompId'], $round_robin_metadata, $team_node_id, $game_node_id);
                    }
                    break;
            }
        }
    }
    return $markup;
}

function get_tournament_crumbs($tournament_id) {
    $tournament_with_parents = get_tournament_with_parents($tournament_id);
    $tournament_node_id = get_fgrtournament_node_id()['nid'];
    $tournament_buff = $tournament_with_parents;
    $markup = '<ul class="crumbs"><li><a href="./' . $tournament_node_id . '">Все турниры</a><span class="devider">></span></li>';
    $markup_array = array();
    $flag = false;
    while($tournament_buff['Parent'] != null) {
        if(is_league_type($tournament_buff['CompTypeId']) || is_playoff_type($tournament_buff['CompTypeId']) || is_chessmates_type($tournament_buff['CompTypeId'])) {
            if($flag) {
                array_push($markup_array, '<li><a href="./' . $tournament_node_id . '?tournament_id=' . $tournament_buff['CompId'] . '&type=info">' . $tournament_buff['Name'] . '</a><span class="devider">></span></li>');
            } else {
                array_push($markup_array, '<li><a href="./' . $tournament_node_id . '?tournament_id=' . $tournament_buff['CompId'] . '&type=info">' . $tournament_buff['Name'] . '</a></li>');
            }
        } else {
            if($flag) {
                array_push($markup_array, '<li>' . $tournament_buff['Name'] . '<span class="devider">></span></li>');
            } else {
                array_push($markup_array, '<li>' . $tournament_buff['Name'] . '</li>');
            }
        }
        $tournament_buff = $tournament_buff['Parent'];
        $flag = true;
    }
    for($i = count($markup_array) - 1; $i >= 0; $i--) {
        $markup .= $markup_array[$i];
    }
//    $markup .= '</ul>';
    return $markup;
}

function is_near_date($timestamp) {
    $today = new DateTime();
    $today->setTime( 0, 0, 0 );
    $match_date = DateTime::createFromFormat("Y.m.d H:i", $timestamp);
    $match_date->setTime( 0, 0, 0 );
    $diff = $today->diff( $match_date );
    $diffDays = (integer)$diff->format( "%R%a" );
    switch( $diffDays ) {
        case 0:
            return 'Сегодня';
            break;
        case -1:
            return 'Вчера';
            break;
        case +1:
            return 'Завтра';
            break;
        default:
            return 0;
    }
}

function cut_added_pairs($pairs) {
    $new_pairs = array();
    for($i = 0; $i < count($pairs); $i++) {
        for($j = 0; $j < count($pairs[$i]); $j++) {
            if($pairs[$i][$j]['PairAdded'] == 0) {
                array_push($new_pairs, array_slice($pairs[$i], $j));
                break;
            }
        }
    }
    return $new_pairs;
}

function flag_round(&$round) {
    $round['PairAdded'] = 1;
}

/**
 * @return predefined tournament node id
 */
function get_fgrtournament_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrtournament', '=')
        ->execute()
        ->fetchAssoc();
}

/**
 * @return predefined team node id
 */
function get_fgrteam_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrteam', '=')
        ->execute()
        ->fetchAssoc();
}

/**
 * @return predefined game node id
 */
function get_fgrgame_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrgame', '=')
        ->execute()
        ->fetchAssoc();
}

/**
 * @return predefined game node id
 */
function get_fgrreferee_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrreferee', '=')
        ->execute()
        ->fetchAssoc();
}

/**
 * @param $competition
 */
function print_competition_node($competition) {
    print '<li>';
    $node = get_fgrtournament_node_id();
    if(count($competition['Children']) != 0) {
        if(is_league_type($competition['CompTypeId'])) {
            print '<input type="checkbox"/><label for="item-0" id="' . $competition['CompId'] . '">' .
                '<a href="./' . $node['nid'] . '?tournament_id=' . $competition['CompId'] . '&type=info">' . $competition['Name'] . '</a>' .
                '</label>';
        } else {
            print '<input type="checkbox"/><label for="item-0" id="' . $competition['CompId'] . '">' . $competition['Name'] . '</label>';
        }
        print '<ul>';
        foreach($competition['Children'] as $children) {
            print_competition_node($children);
        }
        print '</ul>';
    } else {
        if(get_views_for_comp_type($competition['CompTypeId']) != null) {
            print '<a href="./' . $node['nid'] . '?tournament_id=' . $competition['CompId'] . '&type=info">' . $competition['Name'] . '</a>';
        } else {
            print $competition['Name'];
        }
    }
    print '</li>';
}

/**
 * @param $competition
 */
function print_competition_node2($competition) {
    print '{';
    $node = get_fgrtournament_node_id();
    if(count($competition['Children']) != 0) {
        if(is_league_type($competition['CompTypeId'])) {
            print '\'href\': \'' . $node['nid'] . '?tournament_id=' . $competition['CompId'] . '&type=info\', \'text\': \'' . $competition['Name'] . '\', \'color\': \'blue\',';
        } else {
            print '\'text\': \'' . $competition['Name'] . '\',';
        }
        print '\'state\': { \'expanded\': false } , \'nodes\': [';
        foreach($competition['Children'] as $children) {
            print_competition_node2($children);
        }
        print ']';
    } else {
        if(get_views_for_comp_type($competition['CompTypeId']) != null) {
            print '\'href\': \'' . $node['nid'] . '?tournament_id=' . $competition['CompId'] . '&type=info\', \'text\': \'' . $competition['Name'] . '\', \'color\': \'blue\',';
        } else {
            print '\'text\': \'' . $competition['Name'] . '\'';
        }
    }
    print '},';
}

/**
 * @param $id
 * @return bool
 */
function is_chessmates_type($id) {
    switch($id) {
        case 0:
            return true;
            break;
        default:
            return false;
    }
}

/**
 * @param $id
 * @return bool
 */
function is_playoff_type($id) {
    switch($id) {
        case -1:
            return true;
            break;
        case 1:
            return true;
            break;
        case 2:
            return true;
            break;
        case 3:
            return true;
            break;
        case 5:
            return true;
            break;
        case 7:
            return true;
            break;
        default:
            return false;
    }
}

/**
 * @param $id
 * @return bool
 */
function is_league_type($id) {
    switch($id) {
        case -5:
            return true;
            break;
        default:
            return false;
    }
}

/**
 * @param $id
 * @return null
 */
function get_views_for_comp_type($id) {
    $available_views = array(
        // Group stage
        -2 => array(
            'group'
        ),
        // Playoff type
        -1 => array(
            'playoff'
        ),
        // Round robin type
        0 => array(
            'chessmates'
        ),
        // One game
        1 => array(
            'playoff'
        ),
        // Home and away games
        2 => array(
            'playoff'
        ),
        // Best of 3
        3 => array(
            'playoff'
        ),
        // Best of 5
        5 => array(
            'playoff'
        ),
        // Best of 7
        7 => array(
            'playoff'
        )
    );
    if($available_views != null) {
        if(array_key_exists($id, $available_views)) {
            return $available_views[$id];
        } else {
            return null;
        }
    }
}