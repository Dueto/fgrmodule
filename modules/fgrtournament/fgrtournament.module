<?php

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */
function fgrtournament_help($path, $arg) {
  switch ($path) {
    case "admin/help#fgrtournament":
      return '' . t("Displays tournament bracket") . '';
      break;
  }
}

/**
 * Implements hook_node_info().
 */
function fgrtournament_node_info() {
  $items = array(
      'fgrtournament' => array(
          'name' => t('FGR tournament bracket'),
          'base' => 'node_content',
          'description' => t('Displays tournament bracket.'),
          'help' => 'Displays tournament bracket.',
      ),
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function fgrtournament_node_view($node, $view_mode, $langcode)
{
    module_load_include('inc', 'fgrtournament', 'fgrtournament.api');
    switch ($node->type) {
        case 'fgrtournament':
            $crumbs = array();
            if(isset($_GET['crumbs'])) {
                $crumbs_buff = explode(';', $_GET['crumbs']);
                unset($crumbs_buff[0]);
                foreach($crumbs_buff as $crumb) {
                    $buff = explode(':', $crumb);
                    array_push($crumbs, array(
                        'title' => $buff[0],
                        'ref' => $buff[1]
                    ));
                }
            }
            if(isset($_GET['tournament_id'])) {
                $tournament_id = $_GET['tournament_id'];
                $tournament_type = 'competition';
                if(isset($_GET['type'])) {
                    $tournament_type = $_GET['type'];
                }
                $team_node_id = get_fgrteam_node_id();
                $game_node_id = get_fgrgame_node_id();
                $tournament_metadata = get_tournament_metadata($tournament_id);
                print_r($tournament_metadata);
                switch ($tournament_type) {
                    case 'games':
                        $games_type = 'result';
                        if(isset($_GET['game_type'])) {
                            $games_type = $_GET['game_type'];
                        }
                        switch($games_type) {
                            case 'result':
                                $tournament_games = get_tournament_games_by_id($tournament_id, $games_type);
                                $tournament_games['TournamentMetaData'] = $tournament_metadata;
                                $node->content['fgrtournament_games_ended'] = array(
                                    "#markup" => theme('fgrtournament_games_ended', array('tournament_data' => $tournament_games,
                                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'crumbs' => $crumbs))
                                );
                                break;
                            case 'scheduled':
                                $tournament_games = get_tournament_games_by_id($tournament_id, $games_type);
                                $tournament_games['TournamentMetaData'] = $tournament_metadata;
                                $node->content['fgrtournament_games_planned'] = array(
                                    "#markup" => theme('fgrtournament_games_planned', array('tournament_data' => $tournament_games,
                                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'crumbs' => $crumbs))
                                );
                                break;
                            case 'online':
                                $tournament_games = get_tournament_games_by_id($tournament_id, $games_type);
                                $tournament_games['TournamentMetaData'] = $tournament_metadata;
                                $node->content['fgrtournament_games_current'] = array(
                                    "#markup" => theme('fgrtournament_games_current', array('tournament_data' => $tournament_games,
                                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'crumbs' => $crumbs))
                                );
                                break;
                        }
                        break;
                    case 'playoff':
                        $tournament_data = get_tournament_by_id_playoff($tournament_id);
                        $node->content['fgrtournament_playoff'] = array(
                            "#markup" => theme('fgrtournament_playoff', array('tournament_data' => $tournament_data,
                                'node' => $node, 'team_node_id' => $team_node_id['nid'], 'game_node_id' => $game_node_id['nid'], 'crumbs' => $crumbs))
                        );
                        break;
                    case 'competition':
                        $tournament_view_type = 'without_result';
                        if(isset($_GET['view'])) {
                            $tournament_view_type = $_GET['view'];
                        }
                        drupal_add_js(drupal_get_path('module', 'fgrtournament') . '/js/sorttable.js');
                        switch($tournament_view_type) {
                            case 'chess_mates':
                                $tournament_data = get_tournament_by_id_chess_mates($tournament_id);
                                $tournament_data['TournamentMetaData'] = $tournament_metadata;
                                $node->content['fgrtournament_table_sort'] = array(
                                    "#markup" => theme('fgrtournament_table_sort', array('tournament_data' => $tournament_data,
                                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'crumbs' => $crumbs))
                                );
                                break;
                            case 'without_result':
                                $tournament_data = get_tournament_team_stats_by_id($tournament_id);
                                $tournament_data['TournamentMetaData'] = $tournament_metadata;
                                $node->content['fgrtournament_table_without_result'] = array(
                                    "#markup" => theme('fgrtournament_table_without_result', array('tournament_data' => $tournament_data,
                                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'crumbs' => $crumbs))
                                );
                                break;
                            case 'mini':
                                $tournament_data = get_tournament_team_stats_by_id($tournament_id);
                                $tournament_data['TournamentMetaData'] = $tournament_metadata;
                                $node->content['fgrtournament_table_mini'] = array(
                                    "#markup" => theme('fgrtournament_table_mini', array('tournament_data' => $tournament_data,
                                        'node' => $node, 'team_node_id' => $team_node_id['nid'], 'crumbs' => $crumbs))
                                );
                                break;
                        }
                        break;
                }
            } else {
                $result = get_last_tournaments();
                $node->content['fgrtournament_list'] = array(
                    "#markup" => theme('fgrtournament_list', array('fgrtournaments' => $result, 'node' => $node, 'crumbs' => $crumbs))
                );
            }
            break;
    }
}

/**
 * Implements hook_theme();
*/
function fgrtournament_theme() {
    return array(
        'fgrtournament_list' => array(
            'variables' => array('fgrtournaments' => NULL, 'node' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-list',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_playoff' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-playoff',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_table_sort' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-table-sort',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_table_unsort' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-table-unsort',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_table_without_result' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-table-without-result',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_table_mini' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-table-mini',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-games',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games_current' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-games-current',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games_ended' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-games-ended',
            'file' => 'fgrtournament.pages.inc',
        ),
        'fgrtournament_games_planned' => array(
            'variables' => array('tournament_data' => NULL, 'node' => NULL, 'team_node_id' => NULL, 'game_node_id' => NULL, 'crumbs' => NULL),
            'template' => 'templates/fgrtournament-games-planned',
            'file' => 'fgrtournament.pages.inc',
        )
    );
}

/**
 * Implements hook_admin().
 */
function fgrtournament_admin() {
    $form = array();
    $form['fgrtournament_system_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Statistic system url'),
        '#default_value' => variable_get('fgrtournament_system_url', 'http://fgr.ntrlab.ru:81/api'),
        '#description' => t("Statistic system url to get fgr tournament data."),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function fgrtournament_menu() {
    $items = array();
    $items['admin/config/fgrtournament'] = array(
        'title' => 'FGR Tournament module settings',
        'description' => 'FGR Tournament module settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fgrtournament_admin'),
        'access arguments' => array('administer fgrtournament settings'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 * @return predefined tournament node id
 */
function get_fgrtournament_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrtournament', '=')
        ->execute()
        ->fetchAssoc();
}

function get_fgrteam_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrteam', '=')
        ->execute()
        ->fetchAssoc();
}

function get_fgrgame_node_id() {
    return db_select('node', 'nid')
        ->fields('nid')
        ->condition('type', 'fgrgame', '=')
        ->execute()
        ->fetchAssoc();
}

function print_competition_node($competition) {
    print '<li>';
    if(count($competition['Children']) != 0) {
        print '<input type="checkbox"/><label for="item-0" id="' . $competition['CompId'] . '">' . $competition['Name'] . '</label>';
        print '<ul>';
            foreach($competition['Children'] as $children) {
                print_competition_node($children);
            }
        print '</ul>';
    } else {
        $node = get_fgrtournament_node_id();
        if($competition['CanHasGames']) {
            print '<a href="./' . $node['nid'] . '?tournament_id=' . $competition['CompId'] . '&type=competition&crumbs=;' . $competition['Name'] . ':' . './' . $node['nid'] . '">' . $competition['Name'] . '</a>';
        } else {
            print $competition['Name'];
        }
    }
    print '</li>';
}